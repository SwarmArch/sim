from __future__ import (absolute_import, division, print_function)

import os
Import('env')
Import('libsimalloc')
Import('runtime')

env = env.Clone()
env.Append(CPPPATH = [Dir('.').srcnode().abspath])
env.Append(CPPDEFINES = {'SWARM_CACHE_LINE' : 64,
                         runtime.upper() + '_RUNTIME' : 1,
                         })
env.Append(CXXFLAGS = ['-std=c++14'])
env.Append(CFLAGS = ['-std=c11', '-Wstrict-prototypes'])

# Linux distros have been enabling more compiler options by default to improve
# security, even if it may hurt performance and breaks some builds.  See:
# https://wiki.ubuntu.com/ToolChain/CompilerFlags
# https://wiki.debian.org/Hardening
# Let's fight the nanny distros and try to get more consistent behavior
# by disabling new security-related compiler features.
env.Append(CPPFLAGS = ['-fno-stack-protector'])
if not GetOption('clang'):
    env.Append(CPPFLAGS = ['-no-pie', '-fno-PIE'])
    env.Append(LINKFLAGS = ['-no-pie', '-fno-PIE'])
print('Checking whether compiler supports stack-clash prevention and Intel CET...')
# These flags don't exist prior to GCC 8.
testEnv = env.Clone()
#env.Append(CPPFLAGS = ['-fno-stack-clash-protection', '-fcf-protection=none'])
testEnv.Append(CPPFLAGS = ['-fno-stack-clash-protection', '-fcf-protection=none'])
conf = Configure(testEnv)
flagsAreSupported = conf.CheckCXX()
testEnv = conf.Finish()
if flagsAreSupported:
    env = testEnv
else:
    # CheckCXX() printed a scary message upon failure. Tell the user not to worry.
    print('^That failure is good. Continuing with build.')

env.Append(LIBS = ['pthread'])

programs = Glob('*.cpp', strings=True) + Glob('*.c', strings=True)

variant_programs = {
    'bfs.cpp' : [('cg', 'COARSE_GRAIN_TASKS')],
    'roi_exit.cpp' : [('syscall', 'TRY_SYS_EXIT'), ('group_syscall', 'TRY_SYS_EXIT_GROUP')],
}

max_arguments = {
    'bfs' : 3,
    'precede_stallers' : 4,
    'taskbomb' : 2,
    'taskbomb_tied' : 3,
}

allocators = {
    'swarm' : ['simalloc', 'tcmalloc'],
    'seq' : ['simalloc', 'native'],
}
assert runtime in allocators

def build(program, variantArgs = None):
    program_basename, _ = os.path.splitext(program)
    local = env.Clone()
    if program_basename in max_arguments:
        local.Append(CPPDEFINES = {'PLS_APP_MAX_ARGS' :
                                   max_arguments[program_basename]})
    programSuffix = ""
    if variantArgs:
        (variantSuffix, variantDefine) = variantArgs
        local.Append(CPPDEFINES = [variantDefine])
        local["OBJSUFFIX"] = "_" + variantSuffix + ".o"
        programSuffix = "_" + variantSuffix

    objects = [local.Object(program)]

    for alloc in allocators[runtime]:
        allocenv = local.Clone()
        if alloc == "simalloc": allocenv.Prepend(LIBS = [libsimalloc])
        if alloc == "tcmalloc": allocenv.Prepend(LIBS = ['tcmalloc_minimal'])
        programpath = program_basename + programSuffix
        if alloc != 'simalloc': programpath = os.path.join(alloc, programpath)
        allocenv.Program(target=programpath, source=objects)

for p in programs: build(p)
for (p, varList) in list(variant_programs.items()):
    for var in varList: build(p, var)

if runtime == 'swarm' and not GetOption('clang'):
    SConscript('load_balance/SConscript', exports = ['env'], duplicate=0)
